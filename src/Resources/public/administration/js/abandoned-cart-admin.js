(function(){var e={471:function(){},780:function(e,t,a){var r=a(471);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals),a(346).Z("301dbf24",r,!0,{})},346:function(e,t,a){"use strict";function r(e,t){for(var a=[],r={},i=0;i<t.length;i++){var n=t[i],o=n[0],s={id:e+":"+i,css:n[1],media:n[2],sourceMap:n[3]};r[o]?r[o].parts.push(s):a.push(r[o]={id:o,parts:[s]})}return a}a.d(t,{Z:function(){return h}});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var n={},o=i&&(document.head||document.getElementsByTagName("head")[0]),s=null,l=0,c=!1,d=function(){},m=null,u="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,a,i){c=a,m=i||{};var o=r(e,t);return w(o),function(t){for(var a=[],i=0;i<o.length;i++){var s=n[o[i].id];s.refs--,a.push(s)}t?w(o=r(e,t)):o=[];for(var i=0;i<a.length;i++){var s=a[i];if(0===s.refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete n[s.id]}}}}function w(e){for(var t=0;t<e.length;t++){var a=e[t],r=n[a.id];if(r){r.refs++;for(var i=0;i<r.parts.length;i++)r.parts[i](a.parts[i]);for(;i<a.parts.length;i++)r.parts.push(f(a.parts[i]));r.parts.length>a.parts.length&&(r.parts.length=a.parts.length)}else{for(var o=[],i=0;i<a.parts.length;i++)o.push(f(a.parts[i]));n[a.id]={id:a.id,refs:1,parts:o}}}}function C(){var e=document.createElement("style");return e.type="text/css",o.appendChild(e),e}function f(e){var t,a,r=document.querySelector("style["+u+'~="'+e.id+'"]');if(r){if(c)return d;r.parentNode.removeChild(r)}if(p){var i=l++;t=g.bind(null,r=s||(s=C()),i,!1),a=g.bind(null,r,i,!0)}else t=I.bind(null,r=C()),a=function(){r.parentNode.removeChild(r)};return t(e),function(r){r?(r.css!==e.css||r.media!==e.media||r.sourceMap!==e.sourceMap)&&t(e=r):a()}}var y=function(){var e=[];return function(t,a){return e[t]=a,e.filter(Boolean).join("\n")}}();function g(e,t,a,r){var i=a?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,i);else{var n=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(n,o[t]):e.appendChild(n)}}function I(e,t){var a=t.css,r=t.media,i=t.sourceMap;if(r&&e.setAttribute("media",r),m.ssrId&&e.setAttribute(u,t.id),i&&(a+="\n/*# sourceURL="+i.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=a;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(a))}}}},t={};function a(r){var i=t[r];if(void 0!==i)return i.exports;var n=t[r]={id:r,exports:{}};return e[r](n,n.exports,a),n.exports}a.d=function(e,t){for(var r in t)a.o(t,r)&&!a.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="bundles/abandonedcartadmin/",window?.__sw__?.assetPath&&(a.p=window.__sw__.assetPath+"/bundles/abandonedcartadmin/"),function(){"use strict";let{Component:e,Mixin:t}=Shopware;e.register("abandoned-cart-list",{template:'<template>\n    <sw-page :headerBorderColor="\'#00A1FF\'" class="abandoned-cart-list">\n        <template #content>\n            <sw-data-grid :dataSource="carts" :columns="columns">\n                <template #column-fullName="{ item }">\n                    <a :href="`/admin#/sw/customer/detail/${item.customer_id}/base`" class="link">\n                        {{ item.fullName }}\n                    </a>\n                </template>\n                <template #column-lineItems="{ item }">\n                    <sw-button\n                        variant="link"\n                        size="small"\n                        class="line-items-button"\n                        @click="openLineItemsModal(item)"\n                    >\n                        {{ item.lineItems.length }} Items\n                    </sw-button>\n                </template>\n                <template #column-actions="{ item }">\n            <sw-button variant="primary" size="small" @click="openCreateOrderModal(item)">\n              Create Order\n           </sw-button>\n                </template>\n                <template #actions="{ item }">\n                     <sw-context-menu-item @click="openLineItemsModal(item)">\n                        View Line Items\n                    </sw-context-menu-item>\n                    <sw-context-menu-item\n                        @click="openDeleteConfirmationModal(item)"\n                        variant="danger"\n                    >\n                        Delete\n                    </sw-context-menu-item>  \n                </template>\n                \n            </sw-data-grid>\n                <sw-pagination :total="total" :limit="limit" @limitChange="onPageChange" :page="page" @pageChange="onPageChange"></sw-pagination>\n        </template>\n    </sw-page>\n     <sw-modal \n     v-if="showLineItemsModal" \n     title="Cart Line Items" \n     @modal-close="closeLineItemsModal"\n     size="small">\n    <sw-data-grid\n        :dataSource="selectedCartLineItems"\n        :columns="lineItemColumns"\n        :showSelection="false">\n        <template #column-label="{ item }">\n            {{ item.label }}\n        </template>\n        {# <template #column-price="{ item }">\n            {{ formatCurrency(item.lineItems.reduce((acc, li) => acc + (li.price?.unitPrice || 0) * li.quantity, 0)) }}\n        </template> #}\n\n        <template #column-quantity="{ item }">\n            {{ item.quantity }}\n        </template>\n        <template #column-unitPrice="{ item }">\n             {{ formatCurrency(item.unitPrice) }}\n         </template>\n    </sw-data-grid>\n</sw-modal>\n<sw-modal v-if="showCreateOrderModal" title="Confirm Order Creation" @modal-close="closeCreateOrderModal" class="custom-small-modal" size="large">\n        <p>Are you sure you want to create an order for this cart?</p>\n        <template #modal-footer>\n            <sw-button @click="closeCreateOrderModal" variant="ghost">\n                Cancel\n            </sw-button>\n            <sw-button @click="confirmCreateOrder" variant="primary">\n                Confirm\n            </sw-button>\n        </template>\n    </sw-modal>\n    <sw-modal \n    v-if="showCreateOrderModal" \n    title="Confirm Order Creation" \n    @modal-close="closeCreateOrderModal" \n    class="custom-small-modal" \n    size="small">\n    <p>Are you sure you want to create an order for this cart?</p>\n    \n    <template #modal-footer>\n        <sw-button @click="closeCreateOrderModal" variant="ghost">\n            Cancel\n        </sw-button>\n        <sw-button @click="confirmCreateOrder" variant="primary">\n            Confirm\n        </sw-button>\n    </template>\n</sw-modal>\n    <sw-modal v-if="showDeleteConfirmationModal" title="Confirm Deletion" @modal-close="showDeleteConfirmationModal = false" class="custom-small-modal" size="small">\n        <p>Are you sure you want to delete this abandoned cart?</p>\n        <template #modal-footer>\n            <sw-button @click="showDeleteConfirmationModal = false" variant="ghost">\n                Cancel\n            </sw-button>\n            <sw-button @click="confirmDeleteCart" variant="danger">\n                Confirm\n            </sw-button>\n        </template>\n        \n    </sw-modal>\n\n</template>',inject:["repositoryFactory","orderService"],mixins:[t.getByName("notification")],data(){return{isLoading:!1,carts:[],repository:null,showLineItemsModal:!1,selectedCartLineItems:[],showCreateOrderModal:!1,selectedCartForOrder:null,showDeleteConfirmationModal:!1,selectedCartForDeletion:null,total:0,page:1,limit:10,lineItemColumns:[{property:"label",label:"Product",sortable:!1},{property:"quantity",label:"Quantity",sortable:!1},{property:"unitPrice",label:"Price",sortable:!1}],columns:[{property:"fullName",label:"Name",sortable:!0},{property:"price",label:"Price",sortable:!0},{property:"line_item_count",label:"Line Item Count",sortable:!0},{property:"created_at",label:"Created At",sortable:!0},{property:"actions",label:"Actions",sortable:!1}]}},created(){this.loadCarts()},methods:{async exciseTax(e,t){try{let a=await fetch("/api/excise",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({cart:e,lineItem:t})});if(!a.ok)throw Error(`HTTP error! Status: ${a.status}`);return await a.json()}catch(e){throw console.error("Fetch error:",e),e}},openCreateOrderModal(e){this.selectedCartForOrder=e,this.showCreateOrderModal=!0},closeCreateOrderModal(){this.showCreateOrderModal=!1,this.selectedCartForOrder=null},openDeleteConfirmationModal(e){this.selectedCartForDeletion=e,this.showDeleteConfirmationModal=!0},confirmDeleteCart(){this.selectedCartForDeletion&&this.deleteCart(this.selectedCartForDeletion.id),this.showDeleteConfirmationModal=!1,this.selectedCartForDeletion=null},confirmCreateOrder(){this.selectedCartForOrder&&this.createOrder(this.selectedCartForOrder),this.closeCreateOrderModal()},openLineItemsModal(e){this.selectedCartLineItems=e.lineItems.map(e=>({label:e.label,quantity:e.quantity,unitPrice:e.price?.unitPrice||0,totalPrice:e.price?.totalPrice||0})),this.showLineItemsModal=!0},closeLineItemsModal(){this.showLineItemsModal=!1,this.selectedCartLineItems=[]},formatCurrency(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:2}).format(e)},async loadCarts(){this.isLoading=!0;try{this.repository=this.repositoryFactory.create("sl_25_abandoned_cart");let e=await this.repository.search(this.createCriteria(),Shopware.Context.api);this.carts=e.map(e=>({id:e.id,fullName:`${e.firstName} ${e.lastName}`,token:e.cartToken,customer_id:e.customerId,price:e.lineItems.reduce((e,t)=>e+(t.price?.unitPrice||0)*t.quantity,0),line_item_count:e.lineItems.length,created_at:this.formatDate(e.createdAt),lineItems:e.lineItems})),this.total=e.total||0}catch(e){console.error("Error fetching abandoned carts:",e)}finally{this.isLoading=!1}},onPageChange(e){if("object"==typeof e)e.page&&e.page>0&&(this.page=parseInt(e.page,10)),e.limit&&e.limit>0&&e.limit<=100&&(this.limit=parseInt(e.limit,10));else{if("number"!=typeof e||!(e>0))return;this.page=parseInt(e,10)}this.loadCarts()},formatDate(e){return e?new Intl.DateTimeFormat("en-US",{year:"numeric",month:"short",day:"2-digit",hour:"2-digit",minute:"2-digit"}).format(new Date(e)):""},createCriteria(){return new Shopware.Data.Criteria(this.page,this.limit).addSorting(Shopware.Data.Criteria.sort("createdAt","DESC"))},async createOrder(e){try{let t=await Promise.all(e.lineItems.map(async t=>{let a=await this.exciseTax(e,t);return[t.id,a]})),a=Object.fromEntries(t),r=Shopware.Context.app.systemCurrencyId,i=this.repositoryFactory.create("customer"),n=await i.get(e.customer_id,Shopware.Context.api),o=n.salesChannelId,s=n.defaultBillingAddressId,l=this.repositoryFactory.create("customer_address"),c=await l.get(s,Shopware.Context.api),d=this.repositoryFactory.create("state_machine_state"),m=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("technicalName","open")),u=await d.search(m,Shopware.Context.api),p=u[0]?.id,h=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("technicalName","open")),w=await d.search(h,Shopware.Context.api),C=w[0]?.id,f=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("technicalName","open")),y=await d.search(f,Shopware.Context.api),g=y[0]?.id,I=this.repositoryFactory.create("shipping_method"),b=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("active",!0)),S=await I.search(b,Shopware.Context.api),x=S[0]?.id,v=new Date,D=v.toISOString(),M=new Date(v.setDate(v.getDate()+7)).toISOString();if(!r||!o||!s||!p||!g)throw Error("Missing required data: currencyId, salesChannelId, billingAddressId, orderStateId, or paymentStateId.");let O=Shopware.Service("numberRangeService"),N=(await O.reserve("order",o)).number.toString(),F=e.lineItems.reduce((e,t)=>{let a=t.price.taxRules?.[0]?.taxRate||0,r=t.price.unitPrice,i=t.quantity;return 0===a?e:e+r*i*(a/100)},0),P=e.price+F;e.lineItems.flatMap(e=>e.price.calculatedTaxes||[]),console.log("Wed april");let T={customerId:e.customer_id,orderNumber:N,billingAddressId:s,salesChannelId:o,currencyId:r,currencyFactor:1,orderDateTime:new Date().toISOString(),stateId:p,cartToken:e.token,orderCustomer:{customerId:e.customer_id,email:n.email,salutationId:n.salutationId,firstName:n.firstName,lastName:n.lastName,company:n.company||null,title:n.title||null,vatIds:n.vatIds||null,customerNumber:n.customerNumber},deliveries:[{stateId:C,shippingMethodId:x,shippingDateEarliest:D,shippingDateLatest:M,shippingCosts:{totalPrice:20,calculatedTaxes:[],taxRules:[],unitPrice:20,quantity:1},shippingOrderAddress:{id:s,versionId:null,countryId:c.countryId,orderId:null,salutationId:c.salutationId,firstName:c.firstName,lastName:c.lastName,street:c.street,city:c.city,customFields:{}}}],transactions:[{paymentMethodId:n.defaultPaymentMethodId,amount:{totalPrice:e.price,calculatedTaxes:[],taxRules:[],unitPrice:e.price,quantity:1},stateId:g}],shippingCosts:{totalPrice:20,calculatedTaxes:[],taxRules:[],unitPrice:20,quantity:1},lineItems:e.lineItems.map((e,t)=>{let r=e.price.unitPrice,i=e.quantity,n=e.price.calculatedTaxes||[];e.price.taxRules;let o=n.reduce((e,t)=>e+t.tax,0);return{identifier:`${e.productId}-${t}`,productId:e.productId,quantity:e.quantity,label:e.label,price:{unitPrice:r,totalPrice:r*i+o,quantity:e.quantity,calculatedTaxes:a[e.id].newTaxes,taxRules:a[e.id].taxRules}}}),price:{totalPrice:P,netPrice:e.price,positionPrice:e.price,rawTotal:e.price,taxStatus:"net",calculatedTaxes:e.lineItems.flatMap(e=>a[e.id]?.newTaxes||[]),taxRules:e.lineItems.flatMap(e=>a[e.id]?.taxRules||[])},itemRounding:{decimals:2,interval:.01,roundForNet:!0},totalRounding:{decimals:2,interval:.01,roundForNet:!0}};if(await Shopware.Service("storeService").httpClient.post("/order",T,{headers:{Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}),e.lineItems&&e.lineItems.length>0){let t=Shopware.Application.getContainer("init").httpClient;for(let a of e.lineItems)if(a.id)try{await t.delete(`/order-line-item/${a.id}`,{headers:{Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}})}catch(e){console.error(`Failed to delete line item with ID: ${a.id}`,e)}}if(!e.id)throw Error("Cart ID is missing. Cannot delete the cart.");await this.repository.delete(e.id,Shopware.Context.api),this.createNotificationSuccess({title:"Order Created",message:`Order successfully created for ${e.fullName}.`}),this.loadCarts()}catch(e){this.createNotificationError({title:"Order Creation Failed",message:`An error occurred while creating the order: ${e.message}`})}},async deleteCart(e){this.isLoading=!0;try{if(!e)throw Error("Cart ID is required to delete the cart.");await this.repository.delete(e,Shopware.Context.api),this.carts=this.carts.filter(t=>t.id!==e),this.createNotificationSuccess({title:"Cart Deleted",message:"The abandoned cart was successfully deleted."})}catch(e){this.createNotificationError({title:"Deletion Failed",message:`An error occurred while deleting the cart: ${e.message}`}),console.error("Error deleting cart:",e)}finally{this.isLoading=!1}}}}),Shopware.Module.register("abandoned-cart",{type:"plugin",name:"abandoned-cart",title:"Admin Orders",description:"Manage abandoned carts efficiently",color:"#ff3d3d",icon:"default-shopping-paper-bag",routes:{list:{component:"abandoned-cart-list",path:"list"}},navigation:[{id:"abandoned-cart",label:"Admin Orders",color:"#ff3d3d",path:"abandoned.cart.list",icon:"default-shopping-paper-bag",parent:"sw-order",position:50}]}),Shopware.Component.override("sw-customer-detail",{template:" {% block sw_customer_detail_content_tab_general %}\n    {% parent %}\n    <sw-tabs-item :route=\"{ name: 'sw.customer.detail.custom', params: { id: $route.params.id } }\">\n        Customer Carts\n    </sw-tabs-item>\n{% endblock %}",created(){console.log("sw-customer-detail override is applied")}});let{Component:r,Mixin:i}=Shopware;r.register("sw-customer-detail-custom",{template:'<template>\n    <sw-card title="Customer Carts">\n        <template #default>\n          <div v-if="carts.length === 0" class="empty-state">\n                <p>No carts available for this user.</p>\n                <p>Once they add items, their carts will appear here.</p>\n            </div>\n            <div v-else>\n                <sw-data-grid\n                    :columns="columns"\n                    :dataSource="carts"\n                    :isLoading="isLoading"\n                >\n             <template #column-actions="{ item }">\n             <sw-button variant="primary" size="small" @click="openCreateOrderModal(item)">\n                Create Order\n            </sw-button>\n            </template>\n                 <template #actions="{ item }">\n                      <sw-context-menu-item @click="openLineItemsModal(item)">\n                        View Line Items\n                    </sw-context-menu-item>\n           <sw-context-menu-item variant="danger" @click="openDeleteConfirmationModal(item)">\n                Delete\n           </sw-context-menu-item>\n                </template>\n                </sw-data-grid>\n            </div>\n        </template>\n    </sw-card>\n     <sw-modal \n     v-if="showLineItemsModal" \n     title="Cart Line Items" \n     @modal-close="closeLineItemsModal"\n     size="small">\n    <sw-data-grid\n        :dataSource="selectedCartLineItems"\n        :columns="lineItemColumns"\n        :showSelection="false">\n        <template #column-label="{ item }">\n            {{ item.label }}\n        </template>\n        <template #column-quantity="{ item }">\n            {{ item.quantity }}\n        </template>\n   <template #column-unitPrice="{ item }">\n        {{ formatCurrency(item.unitPrice) }}\n    </template>\n    </sw-data-grid>\n</sw-modal>\n    <sw-modal \n    v-if="showCreateOrderModal" \n    title="Confirm Order Creation" \n    @modal-close="closeCreateOrderModal" \n    class="custom-small-modal" \n    size="small">\n    <p>Are you sure you want to create an order for this cart?</p>\n    \n    <template #modal-footer>\n        <sw-button @click="closeCreateOrderModal" variant="ghost">\n            Cancel\n        </sw-button>\n        <sw-button @click="confirmCreateOrder" variant="primary">\n            Confirm\n        </sw-button>\n    </template>\n</sw-modal>\n    <sw-modal v-if="showDeleteConfirmationModal" title="Confirm Deletion" @modal-close="showDeleteConfirmationModal = false" class="custom-small-modal" size="small">\n        <p>Are you sure you want to delete this abandoned cart?</p>\n        <template #modal-footer>\n            <sw-button @click="showDeleteConfirmationModal = false" variant="ghost">\n                Cancel\n            </sw-button>\n            <sw-button @click="confirmDeleteCart" variant="danger">\n                Confirm\n            </sw-button>\n        </template>\n        \n    </sw-modal>\n\n\n</template>\n',inject:["repositoryFactory","orderService"],mixins:[i.getByName("notification")],data(){return{isLoading:!1,carts:[],repository:null,showLineItemsModal:!1,selectedCartLineItems:[],showCreateOrderModal:!1,selectedCartForOrder:null,showDeleteConfirmationModal:!1,selectedCartForDeletion:null,total:0,page:1,limit:10,lineItemColumns:[{property:"label",label:"Product",sortable:!1},{property:"quantity",label:"Quantity",sortable:!1},{property:"unitPrice",label:"Price",sortable:!1}],columns:[{property:"fullName",label:"Name",sortable:!0},{property:"price",label:"Price",sortable:!0},{property:"line_item_count",label:"Line Item Count",sortable:!0},{property:"created_at",label:"Created At",sortable:!0},{property:"actions",label:"Actions",sortable:!1}]}},created(){this.repository=this.repositoryFactory.create("sl_25_abandoned_cart"),this.loadCarts()},methods:{async exciseTax(e,t){try{let a=await fetch("/api/excise",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Context.api.authToken.access}`},body:JSON.stringify({cart:e,lineItem:t})});if(!a.ok)throw Error(`HTTP error! Status: ${a.status}`);return await a.json()}catch(e){throw console.error("Fetch error:",e),e}},openCreateOrderModal(e){this.selectedCartForOrder=e,this.showCreateOrderModal=!0},closeCreateOrderModal(){this.showCreateOrderModal=!1,this.selectedCartForOrder=null},openDeleteConfirmationModal(e){this.selectedCartForDeletion=e,this.showDeleteConfirmationModal=!0},confirmDeleteCart(){this.selectedCartForDeletion&&this.deleteCart(this.selectedCartForDeletion.id),this.showDeleteConfirmationModal=!1,this.selectedCartForDeletion=null},confirmCreateOrder(){this.selectedCartForOrder&&this.createOrder(this.selectedCartForOrder),this.closeCreateOrderModal()},openLineItemsModal(e){this.selectedCartLineItems=e.lineItems.map(e=>({label:e.label,quantity:e.quantity,unitPrice:e.price?.unitPrice||0,totalPrice:e.price?.totalPrice||0})),this.showLineItemsModal=!0},closeLineItemsModal(){this.showLineItemsModal=!1,this.selectedCartLineItems=[]},formatCurrency(e){return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:2}).format(e)},async loadCarts(){this.isLoading=!0;try{this.repository=this.repositoryFactory.create("sl_25_abandoned_cart");let e=await this.repository.search(this.createCriteria(),Shopware.Context.api);e.forEach((e,t)=>{}),this.carts=e.map(e=>({id:e.id,fullName:`${e.firstName} ${e.lastName}`,token:e.cartToken,customer_id:e.customerId,price:e.price,line_item_count:e.lineItems.length,created_at:this.formatDate(e.createdAt),lineItems:e.lineItems})),this.total=e.total||0}catch(e){console.error("Error fetching abandoned carts:",e)}finally{this.isLoading=!1}},onPageChange(e){if("object"==typeof e)e.page&&e.page>0&&(this.page=parseInt(e.page,10)),e.limit&&e.limit>0&&e.limit<=100&&(this.limit=parseInt(e.limit,10));else{if("number"!=typeof e||!(e>0))return;this.page=parseInt(e,10)}this.loadCarts()},formatDate(e){return e?new Intl.DateTimeFormat("en-US",{year:"numeric",month:"short",day:"2-digit",hour:"2-digit",minute:"2-digit"}).format(new Date(e)):""},createCriteria(){let e=new Shopware.Data.Criteria(this.page,this.limit).addSorting(Shopware.Data.Criteria.sort("createdAt","DESC")),t=this.$route.params.id;return t&&e.addFilter(Shopware.Data.Criteria.equals("customerId",t)),e},async createOrder(e){try{let t=await Promise.all(e.lineItems.map(async t=>{let a=await this.exciseTax(e,t);return[t.id,a]})),a=Object.fromEntries(t),r=Shopware.Context.app.systemCurrencyId,i=this.repositoryFactory.create("customer"),n=await i.get(e.customer_id,Shopware.Context.api),o=n.salesChannelId,s=n.defaultBillingAddressId,l=this.repositoryFactory.create("customer_address"),c=await l.get(s,Shopware.Context.api),d=this.repositoryFactory.create("state_machine_state"),m=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("technicalName","open")),u=await d.search(m,Shopware.Context.api),p=u[0]?.id,h=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("technicalName","open")),w=await d.search(h,Shopware.Context.api),C=w[0]?.id,f=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("technicalName","open")),y=await d.search(f,Shopware.Context.api),g=y[0]?.id,I=this.repositoryFactory.create("shipping_method"),b=new Shopware.Data.Criteria().addFilter(Shopware.Data.Criteria.equals("active",!0)),S=await I.search(b,Shopware.Context.api),x=S[0]?.id,v=new Date,D=v.toISOString(),M=new Date(v.setDate(v.getDate()+7)).toISOString();if(!r||!o||!s||!p||!g)throw Error("Missing required data: currencyId, salesChannelId, billingAddressId, orderStateId, or paymentStateId.");let O=Shopware.Service("numberRangeService"),N=(await O.reserve("order",o)).number.toString(),F=e.lineItems.reduce((e,t)=>{let a=t.price.taxRules?.[0]?.taxRate||0,r=t.price.unitPrice,i=t.quantity;return 0===a?e:e+r*i*(a/100)},0),P=e.price+F;e.lineItems.flatMap(e=>e.price.calculatedTaxes||[]),console.log("Wed april");let T={customerId:e.customer_id,orderNumber:N,billingAddressId:s,salesChannelId:o,currencyId:r,currencyFactor:1,orderDateTime:new Date().toISOString(),stateId:p,cartToken:e.token,orderCustomer:{customerId:e.customer_id,email:n.email,salutationId:n.salutationId,firstName:n.firstName,lastName:n.lastName,company:n.company||null,title:n.title||null,vatIds:n.vatIds||null,customerNumber:n.customerNumber},deliveries:[{stateId:C,shippingMethodId:x,shippingDateEarliest:D,shippingDateLatest:M,shippingCosts:{totalPrice:20,calculatedTaxes:[],taxRules:[],unitPrice:20,quantity:1},shippingOrderAddress:{id:s,versionId:null,countryId:c.countryId,orderId:null,salutationId:c.salutationId,firstName:c.firstName,lastName:c.lastName,street:c.street,city:c.city,customFields:{}}}],transactions:[{paymentMethodId:n.defaultPaymentMethodId,amount:{totalPrice:e.price,calculatedTaxes:[],taxRules:[],unitPrice:e.price,quantity:1},stateId:g}],shippingCosts:{totalPrice:20,calculatedTaxes:[],taxRules:[],unitPrice:20,quantity:1},lineItems:e.lineItems.map((e,t)=>{let r=e.price.unitPrice,i=e.quantity,n=e.price.calculatedTaxes||[];e.price.taxRules;let o=n.reduce((e,t)=>e+t.tax,0);return{identifier:`${e.productId}-${t}`,productId:e.productId,quantity:e.quantity,label:e.label,price:{unitPrice:r,totalPrice:r*i+o,quantity:e.quantity,calculatedTaxes:a[e.id].newTaxes,taxRules:a[e.id].taxRules}}}),price:{totalPrice:P,netPrice:e.price,positionPrice:e.price,rawTotal:e.price,taxStatus:"net",calculatedTaxes:e.lineItems.flatMap(e=>a[e.id]?.newTaxes||[]),taxRules:e.lineItems.flatMap(e=>a[e.id]?.taxRules||[])},itemRounding:{decimals:2,interval:.01,roundForNet:!0},totalRounding:{decimals:2,interval:.01,roundForNet:!0}};if(await Shopware.Service("storeService").httpClient.post("/order",T,{headers:{Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}}),e.lineItems&&e.lineItems.length>0){let t=Shopware.Application.getContainer("init").httpClient;for(let a of e.lineItems)if(a.id)try{await t.delete(`/order-line-item/${a.id}`,{headers:{Authorization:`Bearer ${Shopware.Context.api.authToken.access}`}})}catch(e){console.error(`Failed to delete line item with ID: ${a.id}`,e)}}if(!e.id)throw Error("Cart ID is missing. Cannot delete the cart.");await this.repository.delete(e.id,Shopware.Context.api),this.createNotificationSuccess({title:"Order Created",message:`Order successfully created for ${e.fullName}.`}),this.loadCarts()}catch(e){this.createNotificationError({title:"Order Creation Failed",message:`An error occurred while creating the order: ${e.message}`})}},async deleteCart(e){this.isLoading=!0;try{if(!e)throw Error("Cart ID is required to delete the cart.");await this.repository.delete(e,Shopware.Context.api),this.carts=this.carts.filter(t=>t.id!==e),this.createNotificationSuccess({title:"Cart Deleted",message:"The abandoned cart was successfully deleted."})}catch(e){this.createNotificationError({title:"Deletion Failed",message:`An error occurred while deleting the cart: ${e.message}`}),console.error("Error deleting cart:",e)}finally{this.isLoading=!1}}}}),a(780),Shopware.Module.register("sw-admin-order-tab",{routeMiddleware(e,t){let a="sw.customer.detail.custom";"sw.customer.detail"===t.name&&t.children.every(e=>e.name!==a)&&t.children.push({name:a,path:"/sw/customer/detail/:id/custom",component:"sw-customer-detail-custom",meta:{parentPath:"sw.customer.index"}}),e(t)}})}()})();